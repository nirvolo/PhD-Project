setwd("/Users/nirvoloshin/Documents/StatsResearch/Coding/MidwestDataExtraction/MidwestYieldandTempData(incl_irrig)")
load("RawMidwestFundatPreProc_incl_irrig.RData")
load("RawMidwestRegdatPreProc_incl_irrig.RData")
setwd("/Users/nirvoloshin/Documents/StatsResearch/Coding/SpatiallyVaryingFunctionalModel_Coding(NewVersion)/Main Functions/")
load("MidwestScaledTriangulation.RData")

source("preprocessing_function.R")
setwd("/Users/nirvoloshin/Documents/StatsResearch/Coding/QuantileRegression/CoreFunctions")
source("agriculture_data_quantreg.R")


############################################################################
######### Heat maps for the true coefficient functions for Kansas ##########
############################################################################
#### Generating the grid points
uu = seq(-3.65, 2.5, length.out = 40) # longitude
vv = seq(-1.45, 1.45, length.out = 40) # latitude
n1 = length(uu)
n2 = length(vv)
u = rep(uu,n2) # repeats the vector uu 10 times
v = rep(vv,rep(n1,n2)) # repeats each value in vv 10 times
grid_pts = matrix(c(u,v), nrow = length(u), ncol = 2)
# load bivariate basis for the grid pts I generated above
B0_grid = basis(kns_tri2$V, kns_tri2$Tr, d = 3, r = 1, grid_pts)
Q2_grid = B0_grid$Q2
BQ2_grid = as.matrix(B0_grid$B%*%Q2_grid)

############## The estimated coefficients for each quantile ############## 
#### 25th quantile ####
kns_qr_res_pnlty_tau0.25 = ag.data_qr(fundat_all = kns_fd_new, nonfd = kns_nonfd_new, thresh = 0.75, n_fold = 5, iter = 1, deg = 3, DE_MEAN_RESP = T,
                                      pred_vars = c("avgPRCP","irrig_prop"), reval = c(0,1), fld_lim = 1, tau = 0.25, spat_triang = kns_tri2,
                                      comp_mod = F, svfqm = T, lambda_seq = c(0.0005,1))
kns_qr_spline_coefs_tau0.25 = kns_qr_res_pnlty_tau0.25$svqfm$spline_coefs
est_coefs_kns_quant.reg_tau0.25 = BQ2_grid%*%kns_qr_spline_coefs_tau0.25

# Heat maps for each of the true coefficients
par(mfrow = c(2,3))
# I also don't need the contour line of code, just by adding the argument contour = T for image2D does the job
# Creating a heatmap for the estimated coefficients based on the grid points
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.25[,1],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Intercept")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.25[,2],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Precipitation")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.25[,3],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Irrigation")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.25[,4],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Beta 1")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.25[,5],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Beta 2")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.25[,6],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Beta 3")

#### 50th quantile ####
# The estimated coefficients for each quantile 
kns_qr_res_pnlty_tau0.50 = ag.data_qr(fundat_all = kns_fd_new, nonfd = kns_nonfd_new, thresh = 0.75, n_fold = 5, iter = 1, deg = 3, DE_MEAN_RESP = T,
                                      pred_vars = c("avgPRCP","irrig_prop"), reval = c(0,1), fld_lim = 1, tau = 0.5, spat_triang = kns_tri2,
                                      comp_mod = F, svfqm = T, lambda_seq = c(0.0015,1))
kns_qr_spline_coefs_tau0.50 = kns_qr_res_pnlty_tau0.50$svqfm$spline_coefs
est_coefs_kns_quant.reg_tau0.50 = BQ2_grid%*%kns_qr_spline_coefs_tau0.50

# Heat maps for each of the true coefficients
par(mfrow = c(2,3))
# I also don't need the contour line of code, just by adding the argument contour = T for image2D does the job
# Creating a heatmap for the estimated coefficients based on the grid points
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.50[,1],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Intercept")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.50[,2],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Precipitation")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.50[,3],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Irrigation")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.50[,4],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Beta 1")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.50[,5],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Beta 2")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.50[,6],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Beta 3")


#### 75th quantile ####
# The estimated coefficients for each quantile 
kns_qr_res_pnlty_tau0.75 = ag.data_qr(fundat_all = kns_fd_new, nonfd = kns_nonfd_new, thresh = 0.90, n_fold = 5, iter = 1, deg = 3, DE_MEAN_RESP = T,
                                      pred_vars = c("avgPRCP","irrig_prop"), reval = c(0,1), fld_lim = 1, tau = 0.75, spat_triang = kns_tri2,
                                      comp_mod = F, svfqm = T, lambda_seq = c(0.05,1))
kns_qr_spline_coefs_tau0.75 = kns_qr_res_pnlty_tau0.75$svqfm$spline_coefs
est_coefs_kns_quant.reg_tau0.75 = BQ2_grid%*%kns_qr_spline_coefs_tau0.75

# Heat maps for each of the true coefficients
par(mfrow = c(2,3))
# I also don't need the contour line of code, just by adding the argument contour = T for image2D does the job
# Creating a heatmap for the estimated coefficients based on the grid points
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.75[,1],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Intercept")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.75[,2],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Precipitation")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.75[,3],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Irrigation")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.75[,4],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Beta 1")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.75[,5],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Beta 2")
image2D(z = matrix(est_coefs_kns_quant.reg_tau0.75[,6],n1,n2), x = uu, y = vv, col = heat.colors(5), contour = T, main = "Beta 3")


################################################################################################ 
################################ Midwest Data Heatmamps ######################################## 
################################################################################################
#install.packages("rnaturalearthdata")
library(rnaturalearthdata)
# Obtaining the county data for the midwest states
midw_county_poly = counties(state = c("Kansas", "Illinois", "Indiana", "Iowa", "Missouri"), cb = TRUE)
################# ADDING THE ESTIMATED COEFFICIENTS TO THE MIDWEST POLYGON DATA ###############
# Changing the county name and state name to lower case and removing punctuation so I can compare it with the regdat
midw_county_poly$NAME = tolower(gsub(" |'|\\.", "", midw_county_poly$NAME))
midw_county_poly$STATE_NAME = tolower(midw_county_poly$STATE_NAME)
head(midw_county_poly)
# I need to add the beta's to the midw_county_poly matrix to make sure that  I can fill according to those variables.
midw_county_poly[,c("alpha0","alpha1","alpha2", "beta1", "beta2", "beta3", "beta4")] = NA

# Creating containers for each value of tau
midw_county_poly_tau0.25 = midw_county_poly
midw_county_poly_tau0.5 = midw_county_poly
midw_county_poly_tau0.75 = midw_county_poly

# The midwest centroids that will be the grid points for the plot
midw_cent = as.matrix(unique(midw_regdat_new[,c("long","lat")])) # there are 476 counties
typeof(midw_cent)
dim(midw_cent)
B0_midw_cent = basis(midw_scl_tri$V, midw_scl_tri$Tr, d = 3, r = 1, midw_cent)
Q2_midw_cent = B0_midw_cent$Q2
BQ2_midw_cent = as.matrix(B0_midw_cent$B%*%Q2_midw_cent)

################################ Midwest Heatmamps for tau = 0.25 ######################################## 
### Running 1 iteration of the midwest model fitting #####
midw_qr_res_tau0.25 = ag.data_qr(fundat_all = midw_fd_new, nonfd = midw_regdat_new, thresh = 0.60,
                         n_fold = 5, iter = 1, deg = 3, DE_MEAN_RESP = T, pred_vars = c("avgPRCP","irrig_prop"), reval = c(0,1),
                         fld_lim = 1, tau = 0.25, comp_mod = F, svfqm = T, spat_triang = midw_scl_tri, lambda_seq = c(0.025,1))

# There are 476 coefficients since there are 476 counties. Each row corresponds
# to a county.
est_coefs_midw_tau0.25 = data.frame(BQ2_midw_cent%*%midw_qr_res_tau0.25$svqfm$spline_coefs)
# Adding the centroids to the estimated coefficients matrix
est_coefs_midw_tau0.25[,c("long","lat")] = midw_cent
# Adding the county and State
est_coefs_midw_tau0.25[,c("county","State")] = unique(midw_regdat_new[,c("county","State")])
head(est_coefs_midw_tau0.25)

for(i in 1:nrow(est_coefs_midw_tau0.25)){
  cnty_coefs = est_coefs_midw_tau0.25[i,]$county
  state_coefs = est_coefs_midw_tau0.25[i,]$State
  for(j in 1:nrow(midw_county_poly_tau0.25)){
    cnty_poly = midw_county_poly_tau0.25[j,]$NAME
    state_poly = midw_county_poly_tau0.25[j,]$STATE_NAME
    if(cnty_coefs == cnty_poly & state_coefs == state_poly){
      # Adding the first 7 columns to midw_county_poly which represent alpha0,alpha1,beta1,.....,beta4
      midw_county_poly_tau0.25[j,c("alpha0","alpha1","alpha2","beta1", "beta2", "beta3", "beta4")] = est_coefs_midw_tau0.25[i,1:7]
    }
  }
}
############## TODO: **I need to change the limits for the scale_fill_gradientn function since it's different from the GSVFM results** ###
# I can use grid.arrange(plot1, plot2, ncol=2) so that all plots are side by side 
library(gridExtra) # for the grid.arrange function
library(grid) # for the grid.arrange function
#myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
summary(midw_county_poly_tau0.25)
# Smallest value for coefs is -131 and largest is 97. To get them all on the same color scale,
# I need to use the limits argument for the scale_fill_gradient function. I think if I give it (-90,225)
# it should be fine.
# Heatmap for alpha0
alpha0_htmp_tau0.25 = ggplot(data = midw_county_poly_tau0.25) + 
  geom_sf(aes(fill = alpha0), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_viridis_b() + 
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha0", limits = c(-86,38)) + 
  #scale_fill_gradientn(colours = terrain.colors(15), name = "alpha0", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-79,21)) + 
  labs(x ="Longitude", y = "Latitude") 
# theme(plot.title = element_blank(size=14, face="bold"),
# axis.title.x = element_blank(size=14, face="bold"),
# axis.title.y = element_blank(size=14, face="bold"))

alpha0_htmp_tau0.25

# Heatmap for alpha1
alpha1_htmp_tau0.25 = ggplot(data = midw_county_poly_tau0.25) + 
  geom_sf(aes(fill = alpha1), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_viridis_b() + 
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-10,20)) + 
  #scale_fill_gradientn(colours = terrain.colors(15), name = "alpha1", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-1,2)) + 
  #labs(title="Precipitation", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

alpha1_htmp_tau0.25

# Heatmap for alpha2
alpha2_htmp_tau0.25 = ggplot(data = midw_county_poly_tau0.25) + 
  geom_sf(aes(fill = alpha2), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-90,225)) +
  # scale_fill_gradientn(colours = terrain.colors(15), name = "alpha2", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-132,98)) + 
  #labs(title="Irrigation", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

alpha2_htmp_tau0.25

# Heatmap for beta1
beta1_htmp_tau0.25 = ggplot(data = midw_county_poly_tau0.25) + 
  geom_sf(aes(fill = beta1), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-10,20)) +
  #scale_fill_gradientn(colours = terrain.colors(15), name = "beta1", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-2,3)) + 
  #labs(title="Beta 1", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

beta1_htmp_tau0.25

# Heatmap for beta2
beta2_htmp_tau0.25 = ggplot(data = midw_county_poly_tau0.25) + 
  geom_sf(aes(fill = beta2), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-10,20)) +
  #scale_fill_gradientn(colours = c("blue", "green", "yellow", "red"), name = "beta2", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-6,5)) + 
  #labs(title="Beta 2", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

beta2_htmp_tau0.25

# Heatmap for beta3
beta3_htmp_tau0.25 = ggplot(data = midw_county_poly_tau0.25) + 
  geom_sf(aes(fill = beta3), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-10,20)) +
  #scale_fill_gradientn(colours = c("blue", "green", "yellow", "red"), name = "beta3", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-3,3)) + 
  #labs(title="Beta 3", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

beta3_htmp_tau0.25

grid.arrange(alpha0_htmp_tau0.25, alpha1_htmp_tau0.25, alpha2_htmp_tau0.25, beta1_htmp_tau0.25, beta2_htmp_tau0.25, 
             beta3_htmp_tau0.25, nrow = 3, ncol=2)

################################ Midwest Heatmamps for tau = 0.50 ######################################## 
midw_qr_res_tau0.50 = ag.data_qr(fundat_all = midw_fd_new, nonfd = midw_regdat_new, thresh = 0.95,
                                 n_fold = 5, iter = 1, deg = 3, DE_MEAN_RESP = T, pred_vars = c("avgPRCP","irrig_prop"), reval = c(0,1),
                                 fld_lim = 1, tau = 0.50, comp_mod = F, svfqm = T, spat_triang = midw_scl_tri, lambda_seq = c(0.01,1))

# There are 476 coefficients since there are 476 counties. Each row corresponds
# to a county.
est_coefs_midw_tau0.50 = data.frame(BQ2_midw_cent%*%midw_qr_res_tau0.50$svqfm$spline_coefs)
# Adding the centroids to the estimated coefficients matrix
est_coefs_midw_tau0.50[,c("long","lat")] = midw_cent
# Adding the county and State
est_coefs_midw_tau0.50[,c("county","State")] = unique(midw_regdat_new[,c("county","State")])

for(i in 1:nrow(est_coefs_midw_tau0.50)){
  cnty_coefs = est_coefs_midw_tau0.50[i,]$county
  state_coefs = est_coefs_midw_tau0.50[i,]$State
  for(j in 1:nrow(midw_county_poly_tau0.5)){
    cnty_poly = midw_county_poly_tau0.5[j,]$NAME
    state_poly = midw_county_poly_tau0.5[j,]$STATE_NAME
    if(cnty_coefs == cnty_poly & state_coefs == state_poly){
      # Adding the first 7 columns to midw_county_poly which represent alpha0,alpha1,beta1,.....,beta4
      midw_county_poly_tau0.5[j,c("alpha0","alpha1","alpha2","beta1", "beta2", "beta3", "beta4")] = est_coefs_midw_tau0.25[i,1:7]
    }
  }
}
############## TODO: **I need to change the limits for the scale_fill_gradientn function since it's different from the GSVFM results** ###
# I can use grid.arrange(plot1, plot2, ncol=2) so that all plots are side by side 
library(gridExtra) # for the grid.arrange function
library(grid) # for the grid.arrange function
#myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
summary(midw_county_poly_tau0.5)
# Smallest value for coefs is -169 and largest is 128. To get them all on the same color scale,
# I need to use the limits argument for the scale_fill_gradient function.
# Heatmap for alpha0
alpha0_htmp_tau0.50 = ggplot(data = midw_county_poly_tau0.5) + 
  geom_sf(aes(fill = alpha0), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_viridis_b() + 
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha0", limits = c(-86,38)) + 
  #scale_fill_gradientn(colours = terrain.colors(15), name = "alpha0", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-110,64)) + 
  labs(x ="Longitude", y = "Latitude") 
# theme(plot.title = element_blank(size=14, face="bold"),
# axis.title.x = element_blank(size=14, face="bold"),
# axis.title.y = element_blank(size=14, face="bold"))

alpha0_htmp_tau0.50

# Heatmap for alpha1
alpha1_htmp_tau0.50 = ggplot(data = midw_county_poly_tau0.5) + 
  geom_sf(aes(fill = alpha1), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_viridis_b() + 
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-10,20)) + 
  #scale_fill_gradientn(colours = terrain.colors(15), name = "alpha1", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-8,15)) + 
  #labs(title="Precipitation", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

alpha1_htmp_tau0.50

# Heatmap for alpha2
alpha2_htmp_tau0.50 = ggplot(data = midw_county_poly_tau0.5) + 
  geom_sf(aes(fill = alpha2), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-90,225)) +
  # scale_fill_gradientn(colours = terrain.colors(15), name = "alpha2", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-170,129)) + 
  #labs(title="Irrigation", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

alpha2_htmp_tau0.50

# Heatmap for beta1
beta1_htmp_tau0.50 = ggplot(data = midw_county_poly_tau0.5) + 
  geom_sf(aes(fill = beta1), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-10,20)) +
  #scale_fill_gradientn(colours = terrain.colors(15), name = "beta1", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-3,4)) + 
  #labs(title="Beta 1", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

beta1_htmp_tau0.50

# Heatmap for beta2
beta2_htmp_tau0.50 = ggplot(data = midw_county_poly_tau0.5) + 
  geom_sf(aes(fill = beta2), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-10,20)) +
  #scale_fill_gradientn(colours = c("blue", "green", "yellow", "red"), name = "beta2", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-5,5)) + 
  #labs(title="Beta 2", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

beta2_htmp_tau0.50

# Heatmap for beta3
beta3_htmp_tau0.50 = ggplot(data = midw_county_poly_tau0.5) + 
  geom_sf(aes(fill = beta3), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-10,20)) +
  #scale_fill_gradientn(colours = c("blue", "green", "yellow", "red"), name = "beta3", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-6,4)) + 
  #labs(title="Beta 3", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

beta3_htmp_tau0.50

grid.arrange(alpha0_htmp_tau0.50, alpha1_htmp_tau0.50, alpha2_htmp_tau0.50, beta1_htmp_tau0.50, beta2_htmp_tau0.50, 
             beta3_htmp_tau0.50, nrow = 3, ncol=2)


################################ Midwest Heatmamps for tau = 0.75 ######################################## 
midw_qr_res_tau0.75 = ag.data_qr(fundat_all = midw_fd_new, nonfd = midw_regdat_new, thresh = 0.55,
                                 n_fold = 5, iter = 1, deg = 3, DE_MEAN_RESP = T, pred_vars = c("avgPRCP","irrig_prop"), reval = c(0,1),
                                 fld_lim = 1, tau = 0.75, comp_mod = F, svfqm = T, spat_triang = midw_scl_tri, lambda_seq = c(0.0015,1))

# There are 476 coefficients since there are 476 counties. Each row corresponds
# to a county.
est_coefs_midw_tau0.75 = data.frame(BQ2_midw_cent%*%midw_qr_res_tau0.75$svqfm$spline_coefs)
# Adding the centroids to the estimated coefficients matrix
est_coefs_midw_tau0.75[,c("long","lat")] = midw_cent
# Adding the county and State
est_coefs_midw_tau0.75[,c("county","State")] = unique(midw_regdat_new[,c("county","State")])

for(i in 1:nrow(est_coefs_midw_tau0.75)){
  cnty_coefs = est_coefs_midw_tau0.75[i,]$county
  state_coefs = est_coefs_midw_tau0.75[i,]$State
  for(j in 1:nrow(midw_county_poly_tau0.75)){
    cnty_poly = midw_county_poly_tau0.75[j,]$NAME
    state_poly = midw_county_poly_tau0.75[j,]$STATE_NAME
    if(cnty_coefs == cnty_poly & state_coefs == state_poly){
      # Adding the first 7 columns to midw_county_poly which represent alpha0,alpha1,beta1,.....,beta4
      midw_county_poly_tau0.75[j,c("alpha0","alpha1","alpha2","beta1", "beta2", "beta3", "beta4")] = est_coefs_midw_tau0.75[i,1:7]
    }
  }
}
############## TODO: **I need to change the limits for the scale_fill_gradientn function since it's different from the GSVFM results** ###
# I can use grid.arrange(plot1, plot2, ncol=2) so that all plots are side by side 
library(gridExtra) # for the grid.arrange function
library(grid) # for the grid.arrange function
#myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
summary(midw_county_poly_tau0.75)
# Smallest value for coefs is -183 and largest is 132. To get them all on the same color scale,
# I need to use the limits argument for the scale_fill_gradient function.
# Heatmap for alpha0
alpha0_htmp_tau0.75 = ggplot(data = midw_county_poly_tau0.75) + 
  geom_sf(aes(fill = alpha0), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_viridis_b() + 
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha0", limits = c(-86,38)) + 
  #scale_fill_gradientn(colours = terrain.colors(15), name = "alpha0", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-91,78)) + 
  labs(x ="Longitude", y = "Latitude") 
# theme(plot.title = element_blank(size=14, face="bold"),
# axis.title.x = element_blank(size=14, face="bold"),
# axis.title.y = element_blank(size=14, face="bold"))

alpha0_htmp_tau0.75

# Heatmap for alpha1
alpha1_htmp_tau0.75 = ggplot(data = midw_county_poly_tau0.75) + 
  geom_sf(aes(fill = alpha1), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_viridis_b() + 
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-10,20)) + 
  #scale_fill_gradientn(colours = terrain.colors(15), name = "alpha1", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-9,15)) + 
  #labs(title="Precipitation", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

alpha1_htmp_tau0.75

# Heatmap for alpha2
alpha2_htmp_tau0.75 = ggplot(data = midw_county_poly_tau0.75) + 
  geom_sf(aes(fill = alpha2), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-90,225)) +
  # scale_fill_gradientn(colours = terrain.colors(15), name = "alpha2", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-184,133)) + 
  #labs(title="Irrigation", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

alpha2_htmp_tau0.75

# Heatmap for beta1
beta1_htmp_tau0.75 = ggplot(data = midw_county_poly_tau0.75) + 
  geom_sf(aes(fill = beta1), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-10,20)) +
  #scale_fill_gradientn(colours = terrain.colors(15), name = "beta1", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-4,4)) + 
  #labs(title="Beta 1", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

beta1_htmp_tau0.75

# Heatmap for beta2
beta2_htmp_tau0.75 = ggplot(data = midw_county_poly_tau0.75) + 
  geom_sf(aes(fill = beta2), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-10,20)) +
  #scale_fill_gradientn(colours = c("blue", "green", "yellow", "red"), name = "beta2", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-4,5)) + 
  #labs(title="Beta 2", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

beta2_htmp_tau0.75

# Heatmap for beta3
beta3_htmp_tau0.75 = ggplot(data = midw_county_poly_tau0.75) + 
  geom_sf(aes(fill = beta3), color = "black") + 
  #scale_fill_viridis_c(option = "plasma") +
  #scale_fill_gradient(low = "blue", high = "red", name = "alpha1", limits = c(-10,20)) +
  #scale_fill_gradientn(colours = c("blue", "green", "yellow", "red"), name = "beta3", limits = c(-90,225)) + 
  scale_fill_gradientn(colours = myPalette(10), limits = c(-3,3)) + 
  #labs(title="Beta 3", x ="Longitude", y = "Latitude")
  labs(x ="Longitude", y = "Latitude")

beta3_htmp_tau0.75

grid.arrange(alpha0_htmp_tau0.75, alpha1_htmp_tau0.75, alpha2_htmp_tau0.75, beta1_htmp_tau0.75, beta2_htmp_tau0.75, 
             beta3_htmp_tau0.75, nrow = 3, ncol=2)



